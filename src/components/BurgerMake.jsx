/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/characters.gltf
*/
import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { Float, useGLTF, useScroll } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { Physics, usePlane, useBox } from '@react-three/cannon'
import { BurgerUnfixed } from './BurgerUnfixed'

function Patty(props) {  
  const [ref] = useBox(() => ({ mass: 0.5, position: [0, 0, 0], args: [1, 0.3, 1] ,...props }))
  return (
    <mesh ref={ref}>
      <BurgerUnfixed patty={true}/>
      </mesh>
  )
}

function TopBun(props) {  
  const [ref] = useBox(() => ({ mass: 0.5, position: [0, 0, 0], args: [10, 0.5, 10] ,...props }))
  return (
    <mesh ref={ref}>
      <BurgerUnfixed topBun={true}/>
      </mesh>
  )
}

function BottomBun(props) {  
  const [ref] = useBox(() => ({ mass: 0.5, position: [0, 0, 0], args: [10, 0.35, 10] ,...props }))
  return (
    <mesh ref={ref}>
      <BurgerUnfixed bottomBun={true}/>
      </mesh>
  )
}

function Tomato(props) {  
  const [ref] = useBox(() => ({ mass: 0.5, position: [0, 0, 0], args: [10, 0.1, 10] ,...props }))
  return (
    <mesh ref={ref}>
      <BurgerUnfixed tomato={true}/>
      </mesh>
  )
}

function Lettuce(props) {  
  const [ref] = useBox(() => ({ mass: 0.5, position: [0, 0, 0], args: [10, 0.1, 10] ,...props }))
  return (
    <mesh ref={ref}>
      <BurgerUnfixed lettuce={true}/>
      </mesh>
  )
}

function Cheese(props) {  
  const [ref] = useBox(() => ({ mass: 0.5, position: [0, 0, 0], args: [10, 0.1, 10] ,...props }))
  return (
    <mesh ref={ref}>
      <BurgerUnfixed cheese={true}/>
      </mesh>
  )
}

function Plane(props) {
  const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], ...props }))
  return (
    <mesh ref={ref} receiveShadow >
      <planeGeometry args={[1000, 1000]} />
      <shadowMaterial color="#171717" transparent opacity={0.4} />
    </mesh>
  )
}

export function BurgerMake(props) {

    // CALCULATING WIDTH AND HEIGHT OF THE SCREEN
    const { width, height } = useThree((state) => state.viewport)
    const scroll = useScroll( )
    const { viewport } = useThree()
    const [characterScale, setCharacterScale] = useState(0)

    // ROTATION
    useFrame((state, delta) => {
      const r1 = scroll.range(0, 1 / 4)
      const r2 = scroll.range(1 / 4, 1 / 4)
      const r3 = scroll.visible(4 / 5, 1 / 5)
  //    mesh.current.rotation.y += r1/10
      setCharacterScale(scroll.range(0, 1 / 2) * 10 + 1)
    })

    const arr = [1,2,3,4]
    return (
    <>  
        <Physics>
        <Plane position={[0,-3,0]}/>
        { 
            props.pattyShow && <Patty/>
        }
        { 
            props.cheeseShow && <Cheese/>
        }
        { 
            props.topBunShow && <TopBun/>
        }
        { 
            props.bottomBunShow && <BottomBun/>
        }
        { 
            props.lettuceShow && <Lettuce/>
        }
        { 
            props.tomatoShow && <Tomato/>
        }
        </Physics>
    </>
  )
}

useGLTF.preload('/characters.gltf')
